name: Publish

on:
  push:
    branches:
      - main
      - develop

env:
  PYTHON_VERSION: 3.11

jobs:
  publish:
    # To enable auto publishing to github, update your electron publisher
    # config in package.json > "build" and remove the conditional below
    runs-on: ${{ matrix.platform.os }}
    strategy:
      matrix:
        platform:
          [
            { os: "ubuntu-latest", cmd: "--linux", arch: '' },
            { os: "macos-latest", cmd: "--mac", arch: 'x64' },
            { os: "macos-latest", cmd: "--mac", arch: 'arm64' },
            { os: "windows-latest", cmd: "--win", arch: '' },
          ]

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v4

      - name: Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Node and NPM
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
      - name: Diagnose Environment
        run: |
          echo "Node.js version: $(node -v)"
          echo "NPM version: $(npm -v)"
          echo "Operating System: $(uname -a)"

      - name: add git binaries to PATH on Windows
        if: runner.os == 'Windows'
        run: |
          echo "C:\Program Files\Git\usr\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "C:\Program Files\Git\mingw64\libexec\git-core" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Setup mac build
        if: matrix.platform.cmd == '--mac'
        run: |
          npx tsx setupMacBuildArch.ts ${{ matrix.platform.arch }}
      - name: Install and build
        run: |
          npm cache clean --force
          npm install
          npm run postinstall
          npm run build

      - name: Publish releases
        env:
          # These values are used for auto updates signing
          # APPLE_ID: ${{ secrets.APPLE_ID }}
          # APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
          # CSC_LINK: ${{ secrets.CSC_LINK }}
          # CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          # This is used for uploading release assets to github
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BUILD_ARCHITECTURE: ${{ matrix.platform.arch }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          npm exec electron-builder -- --publish always ${{ matrix.platform.cmd }}
      - name: Publish Universal Mac Build
        if: matrix.platform.arch == 'x64'
        run: |
          export VERSION=$(jq -r .version release/app/package.json)
          if [ "$BUILD_ARCHITECTURE" = "x64" ]; then
            npx tsx ci-prepare-mac-universal-artifacts.ts
            npx tsx build-mac-universal.ts
            echo "$APPLE_P12_BASE64" | base64 --decode > certificate.p12
            security create-keychain -p "" build.keychain
            security default-keychain -s build.keychain
            security unlock-keychain -p "" build.keychain
            security import certificate.p12 -k build.keychain -P "$APPLE_P12_PASSWORD" -T /usr/bin/codesign
            security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
            codesign --force --deep --sign "Developer ID Application: Sentient Simulations LLC (JKSSH5AMBR)" universal/SentientSims.app
            npm exec electron-builder -- --publish always --prepackaged universal/SentientSims.app --mac --universal -c.mac.target.arch='universal'
          fi
        env:
          # These values are used for auto updates signing
          APPLE_P12_BASE64: ${{ secrets.APPLE_P12_BASE64 }}
          APPLE_P12_PASSWORD: ${{ secrets.APPLE_P12_PASSWORD }}
          # This is used for uploading release assets to github
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BUILD_ARCHITECTURE: ${{ matrix.platform.arch }}
          GITHUB_REPOSITORY: ${{ github.repository }}
